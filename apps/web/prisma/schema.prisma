// This is your Prisma schema file for KARGA NOT
// Authentication + Note sharing platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ==========================================
// AUTHENTICATION MODELS (NextAuth)
// ==========================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  password      String    // bcrypt hashed
  image         String?   // profile image URL
  role          Role      @default(STUDENT)
  verified      Boolean   @default(false)
  
  // Academic Info
  university    String?
  faculty       String?
  department    String?
  studentId     String?
  gradeLevel    Int?
  
  // Gamification
  points        Int       @default(0)
  level         Int       @default(1)
  badges        String?   @default("[]") // JSON string
  
  // Financial
  balance       Float     @default(0)
  credits       Int       @default(10) // Welcome bonus
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  notes         Note[]
  purchases     Purchase[]
  reviews       Review[]
  documents     Document[]  // üÜï Yeni not sistemi
  
  @@map("users")
}

// NextAuth Account model (for OAuth providers)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth VerificationToken model (for email verification)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ==========================================
// NOTE SHARING MODELS
// ==========================================

model Note {
  id            String     @id @default(cuid())
  title         String
  description   String?
  price         Float
  fileKey       String     // S3 key or local path
  fileName      String
  fileSize      Int
  fileType      String
  thumbnailKey  String?
  pageCount     Int?
  status        NoteStatus @default(PENDING)
  viewCount     Int        @default(0)
  downloadCount Int        @default(0)
  
  // Academic Info
  university    String
  faculty       String?
  department    String?
  courseName    String?
  courseCode    String?
  semester      String?    // G√ºz, Bahar
  year          Int?
  
  // Seller
  sellerId      String
  seller        User       @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  purchases     Purchase[]
  reviews       Review[]
  
  @@index([status])
  @@index([university])
  @@index([sellerId])
  @@map("notes")
}

model Purchase {
  id          String   @id @default(cuid())
  userId      String
  noteId      String
  price       Float
  paymentMethod String // credit, stripe, iyzico
  status      PurchaseStatus @default(PENDING)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  note        Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  
  @@unique([userId, noteId])
  @@map("purchases")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5
  comment   String?
  userId    String
  noteId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  
  @@unique([userId, noteId])
  @@map("reviews")
}

// ==========================================
// ENUMS
// ==========================================

enum Role {
  STUDENT
  CONTRIBUTOR
  MODERATOR
  ADMIN
}

enum NoteStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// ==========================================
// üÜï DOCUMENT UPLOAD SYSTEM (COURSEHERO STYLE)
// ==========================================

model Document {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // File Info
  title           String
  description     String?
  fileName        String
  fileUrl         String    // /uploads/xxx.pdf or S3 URL
  fileSize        Int       // bytes
  fileType        String    // pdf, docx, pptx, jpg, png
  thumbnailUrl    String?   // /thumbnails/xxx.jpg
  pageCount       Int?
  
  // Academic Info
  universityId    String
  university      University @relation(fields: [universityId], references: [id])
  universityUnitId String?   // üÜï Fak√ºlte, MYO, Enstit√º
  universityUnit  UniversityUnit? @relation(fields: [universityUnitId], references: [id])
  facultyId       String?
  faculty         Faculty?   @relation(fields: [facultyId], references: [id])
  departmentId    String?
  department      Department? @relation(fields: [departmentId], references: [id])
  courseId        String?
  course          Course?    @relation(fields: [courseId], references: [id])
  
  // Metadata
  documentType    DocumentType @default(DERS_NOTU)
  semester        String?    // guz, bahar, yaz
  academicYear    String?    // 2024-2025
  tags            String?    @default("[]") // JSON array
  language        String     @default("tr")
  
  // Status & Moderation
  status          DocumentStatus @default(PENDING)
  rejectionReason String?
  moderatedAt     DateTime?
  moderatedBy     String?
  
  // Engagement Metrics
  viewCount       Int        @default(0)
  downloadCount   Int        @default(0)
  likeCount       Int        @default(0)
  ratingAvg       Float?
  ratingCount     Int        @default(0)
  
  // Timestamps
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  // Performance indexes
  @@index([userId])
  @@index([universityId])
  @@index([universityUnitId])
  @@index([facultyId])
  @@index([departmentId])
  @@index([courseId])
  @@index([status])
  @@index([documentType])
  @@index([createdAt])
  @@map("documents")
}

model University {
  id          String       @id @default(cuid())
  name        String       @unique
  slug        String       @unique
  city        String?
  type        String?      // Devlet, Vakƒ±f
  logo        String?
  website     String?
  
  // üÜï Y√ñK ATLAS Integration
  yokAtlasId  String?      @unique  // Y√ñK Atlas'tan gelen ID (hash)
  isActive    Boolean      @default(true)
  
  // Relations
  units       UniversityUnit[]  // üÜï Fak√ºlte, MYO, Enstit√º, vb.
  faculties   Faculty[]         // ‚ö†Ô∏è Geriye d√∂n√ºk uyumluluk (deprecated)
  documents   Document[]
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@index([slug])
  @@index([city])
  @@index([yokAtlasId])
  @@map("universities")
}

// üÜï NEW: UniversityUnit (Fak√ºlte, MYO, Enstit√º, Y√ºksekokul)
model UniversityUnit {
  id            String       @id @default(cuid())
  name          String       // "Yataƒüan Meslek Y√ºksekokulu", "M√ºhendislik Fak√ºltesi"
  slug          String       
  type          UnitType     // FACULTY, VOCATIONAL_SCHOOL, INSTITUTE, vb.
  universityId  String
  university    University   @relation(fields: [universityId], references: [id], onDelete: Cascade)
  
  // üÜï Y√ñK ATLAS Integration
  yokAtlasId    String?      @unique  // Y√ñK Atlas'tan gelen ID
  shortName     String?      // Kƒ±sa adƒ± (√∂rn: "Yataƒüan MYO")
  isActive      Boolean      @default(true)
  
  // Relations
  departments   Department[]
  documents     Document[]
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  @@unique([universityId, slug])
  @@index([universityId])
  @@index([type])
  @@index([yokAtlasId])
  @@map("university_units")
}

// ‚ö†Ô∏è DEPRECATED: Geriye d√∂n√ºk uyumluluk i√ßin tutuldu
model Faculty {
  id            String       @id @default(cuid())
  name          String
  slug          String
  universityId  String
  university    University   @relation(fields: [universityId], references: [id], onDelete: Cascade)
  
  // Relations
  departments   Department[]
  documents     Document[]
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  @@unique([universityId, slug])
  @@index([universityId])
  @@map("faculties")
}

model Department {
  id                String     @id @default(cuid())
  name              String
  slug              String
  
  // üÜï ƒ∞ki ≈üekilde de ili≈üki kurulabilir (eski Faculty veya yeni UniversityUnit)
  facultyId         String?    // ‚ö†Ô∏è Eski sistem (deprecated)
  faculty           Faculty?   @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  
  universityUnitId  String?    // üÜï Yeni sistem (Faculty veya MYO)
  universityUnit    UniversityUnit? @relation(fields: [universityUnitId], references: [id], onDelete: Cascade)
  
  // üÜï Y√ñK ATLAS Integration
  yokAtlasId        String?    @unique  // Y√ñK Atlas program ID
  code              String?    // B√∂l√ºm kodu (√∂rn: "102210277")
  scoreType         String?    // SAY, EA, S√ñZ, Dƒ∞L, TYT
  quota             Int?       // Kontenjan
  isActive          Boolean    @default(true)
  
  // Relations
  courses    Course[]
  documents  Document[]
  
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  
  @@unique([facultyId, slug])
  @@unique([universityUnitId, slug])
  @@index([facultyId])
  @@index([universityUnitId])
  @@index([yokAtlasId])
  @@index([scoreType])
  @@map("departments")
}

model Course {
  id           String     @id @default(cuid())
  name         String
  code         String?    // MAT101, BIL201
  slug         String
  credits      Int?
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  
  // Relations
  documents    Document[]
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  @@unique([departmentId, slug])
  @@index([departmentId])
  @@map("courses")
}

// ==========================================
// üÜï NEW ENUMS
// ==========================================

enum UnitType {
  FACULTY              // Fak√ºlte (M√ºhendislik Fak√ºltesi)
  VOCATIONAL_SCHOOL    // Meslek Y√ºksekokulu (Yataƒüan MYO)
  GRADUATE_SCHOOL      // Enstit√º (Fen Bilimleri Enstit√ºs√º)
  COLLEGE              // Y√ºksekokul (Beden Eƒüitimi ve Spor Y√ºksekokulu)
  CONSERVATORY         // Konservatuar (Devlet Konservatuarƒ±)
  RESEARCH_CENTER      // Ara≈ütƒ±rma Merkezi
  APPLICATION_CENTER   // Uygulama Merkezi
  OTHER                // Diƒüer
}

enum DocumentType {
  DERS_NOTU    // Ders Notlarƒ±
  OZET         // √ñzet/Summary
  SLAYT        // Sunum/Slides
  ODEV         // √ñdev/Assignment
  SINAV        // Sƒ±nav/Exam
  KILAVUZ      // Kƒ±lavuz/Guide
  PROJE        // Proje/Project
  LAB          // Lab Raporu
}

enum DocumentStatus {
  PENDING      // Moderasyon bekliyor
  APPROVED     // Onaylandƒ±
  REJECTED     // Reddedildi
  DRAFT        // Taslak (kullanƒ±cƒ± kaydetmi≈ü ama y√ºklememi≈ü)
}
