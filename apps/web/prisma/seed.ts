/**
 * üå± PRISMA SEED SCRIPT
 * 
 * Y√ñK ATLAS verilerini database'e aktarƒ±r:
 * - 603 √úniversite
 * - Fak√ºlteler
 * - B√∂l√ºmler
 * 
 * Kullanƒ±m: npm run seed
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// Y√ñK ATLAS API URL (Python API'den)
const API_BASE = process.env.PYTHON_API_URL || 'http://localhost:8000'

/**
 * Slug olu≈üturur (URL-friendly)
 */
function createSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/ƒü/g, 'g')
    .replace(/√º/g, 'u')
    .replace(/≈ü/g, 's')
    .replace(/ƒ±/g, 'i')
    .replace(/√∂/g, 'o')
    .replace(/√ß/g, 'c')
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '')
}

/**
 * Y√ñK ATLAS API'den √ºniversiteleri √ßeker
 */
async function fetchUniversities() {
  try {
    const response = await fetch(`${API_BASE}/universities`)
    if (!response.ok) {
      throw new Error(`API Error: ${response.status}`)
    }
    const data = await response.json()
    return data
  } catch (error) {
    console.error('‚ùå Failed to fetch universities from API:', error)
    // Fallback: Bo≈ü array d√∂nd√ºr, seed devam etsin
    return []
  }
}

/**
 * Fak√ºlteleri √ßeker (varsa)
 */
async function fetchFaculties(universityName: string) {
  try {
    const response = await fetch(
      `${API_BASE}/faculties?universityName=${encodeURIComponent(universityName)}`
    )
    if (!response.ok) return []
    const data = await response.json()
    return data
  } catch (error) {
    console.error(`‚ùå Failed to fetch faculties for ${universityName}:`, error)
    return []
  }
}

/**
 * B√∂l√ºmleri √ßeker (varsa)
 */
async function fetchDepartments(facultyName: string) {
  try {
    const response = await fetch(
      `${API_BASE}/departments?facultyName=${encodeURIComponent(facultyName)}`
    )
    if (!response.ok) return []
    const data = await response.json()
    return data
  } catch (error) {
    console.error(`‚ùå Failed to fetch departments for ${facultyName}:`, error)
    return []
  }
}

/**
 * Ana seed fonksiyonu
 */
async function main() {
  console.log('üå± Seeding database...')
  console.log('üì° Connecting to Python API:', API_BASE)
  
  // 1. √úniversiteleri √ßek
  console.log('\nüìö Fetching universities from Y√ñK ATLAS API...')
  const universities = await fetchUniversities()
  
  if (!universities || universities.length === 0) {
    console.log('‚ö†Ô∏è  No universities found. Using fallback data...')
    // Fallback: 10 pop√ºler √ºniversite manuel ekle
    await seedFallbackUniversities()
    return
  }
  
  console.log(`‚úÖ Found ${universities.length} universities`)
  
  // 2. Her √ºniversiteyi database'e ekle
  let createdCount = 0
  let skippedCount = 0
  
  for (const uni of universities) {
    try {
      // √úniversite var mƒ± kontrol et
      const existing = await prisma.university.findUnique({
        where: { slug: createSlug(uni.universityName) }
      })
      
      if (existing) {
        console.log(`‚è≠Ô∏è  Skipping ${uni.universityName} (already exists)`)
        skippedCount++
        continue
      }
      
      // √úniversite olu≈ütur
      const university = await prisma.university.create({
        data: {
          name: uni.universityName,
          slug: createSlug(uni.universityName),
          city: uni.city || null,
          type: uni.type || null,
          website: uni.website || null,
        }
      })
      
      createdCount++
      console.log(`‚úÖ Created: ${university.name} (${university.city || 'N/A'})`)
      
      // 3. Bu √ºniversitenin fak√ºltelerini √ßek ve ekle (opsiyonel, yava≈ü olabilir)
      // ƒ∞lk seed i√ßin skip ediyoruz, gerekirse sonra manuel ekleriz
      
      // ƒ∞lerleme g√∂ster (her 50'de bir)
      if (createdCount % 50 === 0) {
        console.log(`üìä Progress: ${createdCount}/${universities.length}`)
      }
      
    } catch (error) {
      console.error(`‚ùå Error creating ${uni.universityName}:`, error)
    }
  }
  
  console.log('\nüìä Summary:')
  console.log(`‚úÖ Created: ${createdCount} universities`)
  console.log(`‚è≠Ô∏è  Skipped: ${skippedCount} universities (already existed)`)
  console.log(`üìö Total in DB: ${await prisma.university.count()}`)
}

/**
 * Fallback: Python API √ßalƒ±≈ümƒ±yorsa manuel veri ekle
 */
async function seedFallbackUniversities() {
  console.log('üìù Seeding fallback universities...')
  
  const fallbackUniversities = [
    { name: 'ƒ∞stanbul √úniversitesi', city: 'ƒ∞stanbul', type: 'Devlet' },
    { name: 'Ankara √úniversitesi', city: 'Ankara', type: 'Devlet' },
    { name: 'ƒ∞stanbul Teknik √úniversitesi', city: 'ƒ∞stanbul', type: 'Devlet' },
    { name: 'Orta Doƒüu Teknik √úniversitesi', city: 'Ankara', type: 'Devlet' },
    { name: 'Boƒüazi√ßi √úniversitesi', city: 'ƒ∞stanbul', type: 'Devlet' },
    { name: 'Hacettepe √úniversitesi', city: 'Ankara', type: 'Devlet' },
    { name: 'Ege √úniversitesi', city: 'ƒ∞zmir', type: 'Devlet' },
    { name: 'Gazi √úniversitesi', city: 'Ankara', type: 'Devlet' },
    { name: 'Dokuz Eyl√ºl √úniversitesi', city: 'ƒ∞zmir', type: 'Devlet' },
    { name: 'Marmara √úniversitesi', city: 'ƒ∞stanbul', type: 'Devlet' },
  ]
  
  for (const uni of fallbackUniversities) {
    await prisma.university.upsert({
      where: { slug: createSlug(uni.name) },
      update: {},
      create: {
        name: uni.name,
        slug: createSlug(uni.name),
        city: uni.city,
        type: uni.type,
      }
    })
  }
  
  console.log(`‚úÖ Seeded ${fallbackUniversities.length} fallback universities`)
}

// Seed'i √ßalƒ±≈ütƒ±r
main()
  .then(async () => {
    await prisma.$disconnect()
    console.log('\n‚ú® Seed completed successfully!')
  })
  .catch(async (e) => {
    console.error('\n‚ùå Seed failed:', e)
    await prisma.$disconnect()
    process.exit(1)
  })
