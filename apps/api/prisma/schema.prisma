// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  password      String // bcrypt hashed
  image         String? // profile image URL
  role          Role      @default(STUDENT)
  verified      Boolean   @default(false)

  // Academic Info
  university String?
  faculty    String?
  department String?
  studentId  String?
  gradeLevel Int?

  // Gamification
  points Int   @default(0)
  level  Int   @default(1)
  badges Json? @default("[]")

  // Financial
  balance Float @default(0)
  credits Int   @default(10) // Welcome bonus

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime?

  // Relations
  accounts  Account[]
  sessions  Session[]
  notes     Note[]
  purchases Purchase[]
  reviews   Review[]

  @@map("users")
}

// NextAuth Account model (for OAuth providers)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth VerificationToken model (for email verification)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model University {
  id         String   @id @default(cuid())
  name       String   @unique
  city       String
  type       String   @default("Devlet") // Devlet, Vakıf
  code       String?  @unique
  logo       String?
  yokAtlasId String?  @unique // YÖK Atlas'tan gelen ID
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  faculties   Faculty[]
  departments Department[]
  notes       Note[]

  @@index([city])
  @@index([type])
  @@map("universities")
}

model Faculty {
  id           String   @id @default(cuid())
  name         String
  universityId String
  yokAtlasId   String?  @unique
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  university  University   @relation(fields: [universityId], references: [id], onDelete: Cascade)
  departments Department[]

  @@unique([universityId, name])
  @@index([universityId])
  @@map("faculties")
}

model Department {
  id           String   @id @default(cuid())
  name         String
  code         String?
  universityId String
  facultyId    String?
  yokAtlasId   String?  @unique
  programType  String? // Lisans, Önlisans
  scoreType    String? // SAY, EA, SÖZ, DİL, TYT
  quota        Int? // Kontenjan
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  university University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  faculty    Faculty?   @relation(fields: [facultyId], references: [id], onDelete: SetNull)
  courses    Course[]

  @@unique([universityId, name])
  @@index([universityId])
  @@index([facultyId])
  @@map("departments")
}

model Course {
  id           String     @id @default(cuid())
  name         String
  code         String
  credits      Int?
  semester     String?
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  notes Note[]

  @@unique([departmentId, code])
  @@map("courses")
}

model Note {
  id            String     @id @default(cuid())
  title         String
  description   String?
  price         Float
  fileKey       String // S3 key
  fileName      String
  fileSize      Int
  fileType      String
  thumbnailKey  String?
  pageCount     Int?
  status        NoteStatus @default(PENDING)
  viewCount     Int        @default(0)
  downloadCount Int        @default(0)
  sellerId      String
  universityId  String
  courseId      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  seller     User       @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  university University @relation(fields: [universityId], references: [id])
  course     Course?    @relation(fields: [courseId], references: [id])
  purchases  Purchase[]
  reviews    Review[]

  @@index([status])
  @@index([universityId])
  @@index([courseId])
  @@index([sellerId])
  @@map("notes")
}

model Purchase {
  id              String         @id @default(cuid())
  buyerId         String
  noteId          String
  amount          Float
  commission      Float // Platform commission
  sellerEarning   Float // Seller earning
  status          PurchaseStatus @default(PENDING)
  paymentProvider String
  paymentId       String?
  accessToken     String?        @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  buyer User @relation(fields: [buyerId], references: [id])
  note  Note @relation(fields: [noteId], references: [id])

  @@unique([buyerId, noteId])
  @@index([status])
  @@index([buyerId])
  @@index([noteId])
  @@map("purchases")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int // 1-5
  comment   String?
  noteId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([noteId, userId])
  @@map("reviews")
}

enum Role {
  STUDENT
  SELLER
  ADMIN
}

enum NoteStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
